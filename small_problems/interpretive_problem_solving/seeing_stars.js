/*
Problem
  > write a function that displays an 8-pointed star in an NxN grid, where
    n is an odd integer supplied as an argument to the function. see examples for 
    pattern
  
  > input: an odd integer
    - that is never less than 7
    - questions:
      - can the input be a special number? (e.g. positive infinity)
  
  > output: an 8-pointed star
    - what is an 8-pointed star?
      - horizontal line in middle, three points on top and bottom
    - star will consist exclusively of asterisks and spaces
    - the top and bottom halves of the star should mirror each other
    - the line to the immediate top and bottom of the center of the star
      will always be three asterisks centered above/below the middlemost line
    - the center line will have an equivalent amount of asterisks to the 
      number passed in as input
    - any given line will have a number of characters equivalent to the number
      passed in as input
    - the top and bottommost lines will have stars at the start, middle, and end
      of the line
    - the top and bottom halves consist of four lines; we need to figure out how
      to generate the middlemost two lines
      - the indices of the first and last asterisk travel toward each other, line
        by line

Examples

star(7);
// logs
*  *  *
 * * *
  ***
*******
  ***
 * * *
*  *  *

star(9);
// logs
*   *   *
 *  *  *
  * * *
   ***
*********
   ***
  * * *
 *  *  *
*   *   *

Data Structure
  > use an array to store the lines generated by the top half; use that array
    and iterate in reverse to log the bottom half
    
Algorithm
  > declare and initialize variable to storage array for top half of star
    - 'topHalf'
  
  > generate and log the top half of the star
    - create a simple loop that uses three indexes: a dynamic index for the first
      asterisk, a static index for the middle asterisk, and a dymanic index for the 
      last asterisk. the loop will continue to increment the first index and decrement the last
      index, building and pushing strings to storage after each iteration, until all indices are
      the same, at which point the loop will break
    - possible implementation, below
      - declare and initialize variables to the following:
        - the first index in the strings to be generated
        - the middle index in the strings to be generated (static)
        - the last index in the strings to be generated
      - create a simple loop
        - declare and initialize a variable to an empty array of the length specified
          by the input, filled with empty spaces as elements
        - replace the elements at each of the specified indices with asterisks
        - join the array and push it to storage
        - increment the first index and decrement the last index
        - break the loop if all the indexes are the same
      - iterate through the storage array, logging each line

  > log the middle of the star
    - build a string that repeats an asterisk N number of times
    - log that string

  > reverse the top half array, then log each line
*/

function star(number) {
  let topHalf = [];
  
  let firstIndex    = 0;
  const middleIndex = (number - 1) / 2;
  let lastIndex     = number - 1;
  
  for(;;) {
    let builtString = [];
    builtString.length = number;
    builtString.fill(' ');
    
    builtString[firstIndex]  = '*';
    builtString[middleIndex] = '*';
    builtString[lastIndex]   = '*';
    topHalf.push(builtString.join(''));
    
    firstIndex += 1;
    lastIndex  -= 1;
    if (firstIndex === lastIndex) break;
  }
  
  topHalf.forEach(line => console.log(line));
  
  let middleString = '*'.repeat(number); // create and log the middle
  console.log(middleString);
  
  topHalf.reverse(); // flip the top half to log the bottom
  topHalf.forEach(line => console.log(line));
}

star(11);